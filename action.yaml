name: 'Build and push to ECR'
description: 'Build and push a Docker image to ERC, written for CA repositories.'
inputs:
  deployment_name:
    description: 'The name of the deployment, also used as the namespace name'
    required: true
  aws_access_key:
    description: 'AWS access key ID'
    required: true
  aws_secret_key:
    description: 'AWS secret access key'
    required: true
  chart_repository:
    description: 'The name of the image repository. Will be used as the name of the Docker image. Defaults to the current repository.'
    required: false
    default: ${{ github.repository }}
  chart_path:
    description: 'The path within the repository to the chart. Defaults to `chart`'
    required: false
    default: chart
  pull_token:
    description: 'A token to pull the chart repository'
    required: true
  cluster:
    description: 'The cluster to deploy to. Defaults to `devops-eks-controlplane`'
    required: false
    default: devops-eks-controlplane
  helm_values:
    description: 'A newline seperated list of helm values, excluding the `--set` flag'
    required: false
  helm_values_file:
    description: 'Path to a helm values file'
    required: false
    default: '/dev/null'

runs:
  using: "composite"
  steps:
      - name: Checkout Chart Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.chart_repository }}
          token: ${{ inputs.pull_token }}
          path: deploy-chart-action

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ inputs.aws_access_key }}
          aws-secret-access-key: ${{ inputs.aws_secret_key }}
          aws-region: eu-west-1

      - name: Get Kube Config
        shell: bash
        run: aws eks update-kubeconfig --name=${{ inputs.cluster }}

      - name: Generate Helm Overrides
        shell: bash
        id: overrides
        run: |
          if [ -n "${{ inputs.helm_values }}"]; then
            echo "${{ inputs.helm_values }}" | tee HELM_INPUTS
            
            while read ITEM; do
              echo "--set $ITEM \\" >> HELM_OVERRIDES
            done < HELM_INPUTS

            echo "HELM_OVERRIDES=$(cat HELM_OVERRIDES)" >> $GITHUB_OUTPUTS
          else
            echo "HELM_OVERRIDES=" >> $GITHUB_OUTPUTS
          fi

      - name: Deploy chart
        shell: bash
        run: |
          helm upgrade --install \
          --namespace ${{ inputs.deployment_name }} \
          ${{ steps.overrides.outputs.HELM_OVERRIDES }}
          -f ${{ inputs.helm_values_file }} \
          ${{ inputs.deployment_name }} \
          deploy-chart-action/${{ inputs.chart_path }}
      
